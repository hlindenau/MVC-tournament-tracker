@model TournamentsProject.Models.TournmentModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Html.Hidden("Lat", 0);
    Html.Hidden("Lng", 0);
    Html.Hidden("Address", "");
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>TournmentModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.TournmentName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TournmentName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TournmentName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Discipline, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Discipline, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Discipline, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ParticipantLimit, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                ViewBag.Nums = new List<int> { 4, 8, 16, 32 };
                List<int> Nums = (List<int>)ViewBag.Nums;
            }
            @Html.DropDownListFor(model => model.ParticipantLimit, new SelectList(Nums), new { @type = "number", @class = "form-control", @min = "2" })
            @Html.ValidationMessageFor(model => model.ParticipantLimit, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.AssignmentDeadline, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.AssignmentDeadline, "{0:yyyy-MM-ddThh:mm:ss}", new { @class = "form-control", type = "datetime-local" })
            @Html.ValidationMessageFor(model => model.AssignmentDeadline, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TournmentDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.TournmentDate, "{0:yyyy-MM-ddThh:mm:ss}", new { @class = "form-control", type = "datetime-local" })
            @Html.ValidationMessageFor(model => model.TournmentDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <h3>Change sponsors</h3>

    <div class="form-group">
        @Html.LabelFor(model => model.SponsorLogoFile, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(x => Model.SponsorLogoFile,
            ((IEnumerable<TournamentsProject.Models.Sponsor>)ViewBag.Sponsors).Select(x => new SelectListItem() { Text = x.Name, Value = x.LogoFilename }),
            "Select a sponsor")
            @Html.ValidationMessageFor(model => model.SponsorLogoFile, "", new { @class = "text-danger" })
        </div>
    </div>
    <h3>Change Localization</h3>
    <div>
        <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
        <style>
            #map {
                height: 400px;
                /* The height is 400 pixels */
                width: 100%;
                /* The width is the width of the web page */
            }

            /* Optional: Makes the sample page fill the window. */
            html,
            body {
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #description {
                font-family: Roboto;
                font-size: 15px;
                font-weight: 300;
            }

            #infowindow-content .title {
                font-weight: bold;
            }

            #infowindow-content {
                display: none;
            }

            #map #infowindow-content {
                display: inline;
            }

            .pac-card {
                margin: 10px 10px 0 0;
                border-radius: 2px 0 0 2px;
                box-sizing: border-box;
                -moz-box-sizing: border-box;
                outline: none;
                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
                background-color: #fff;
                font-family: Roboto;
            }

            #pac-container {
                padding-bottom: 12px;
                margin-right: 12px;
            }

            .pac-controls {
                display: inline-block;
                padding: 5px 11px;
            }

                .pac-controls label {
                    font-family: Roboto;
                    font-size: 13px;
                    font-weight: 300;
                }

            #pac-input {
                background-color: #fff;
                font-family: Roboto;
                font-size: 15px;
                font-weight: 300;
                margin-left: 12px;
                padding: 0 11px 0 13px;
                text-overflow: ellipsis;
                width: 400px;
            }

                #pac-input:focus {
                    border-color: #4d90fe;
                }

            #title {
                color: #fff;
                background-color: #4d90fe;
                font-size: 25px;
                font-weight: 500;
                padding: 6px 12px;
            }

            #target {
                width: 345px;
            }
        </style>
        <script>
            function initAutocomplete() {
                const map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 52.4006, lng: 16.9016 },
                    zoom: 15,
                    mapTypeId: "roadmap",
                });
                // Create the search box and link it to the UI element.
                const input = document.getElementById("pac-input");
                const searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                // Bias the SearchBox results towards current map's viewport.
                map.addListener("bounds_changed", () => {
                    searchBox.setBounds(map.getBounds());
                });
                let markers = [];
                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener("places_changed", () => {
                    const places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }
                    // Clear out the old markers.
                    markers.forEach((marker) => {
                        marker.setMap(null);

                    });
                    markers = [];
                    // For each place, get the icon, name and location.
                    const bounds = new google.maps.LatLngBounds();
                    places.forEach((place) => {
                        if (!place.geometry || !place.geometry.location) {
                            console.log("Returned place contains no geometry");
                            return;
                        }
                        const icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25),
                        };
                        // Create a marker for each place.
                        markers.push(
                            new google.maps.Marker({
                                map,
                                icon,
                                title: place.name,
                                position: place.geometry.location,
                            })
                        );

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                        $('#Address').val(place.name);
                    });
                    map.fitBounds(bounds);
                    var lat = map.center.lat();
                    var lng = map.center.lng();
                    $('#Lat').val(lat);
                    $('#Lng').val(lng);
                });
            }
        </script>

        <input id="pac-input"
               class="controls"
               type="text"
               placeholder="Search Box" />
        <div id="map"></div>

        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <script src="https://maps.googleapis.com/maps/api/js?key=MY-API-KEY&callback=initAutocomplete&libraries=places&v=weekly"
                async></script>
        @Html.HiddenFor(model => model.Latitude, new { id = "Lat" })
        @Html.HiddenFor(model => model.Longitude, new { id = "Lng" })
        @Html.HiddenFor(model => model.LocationAddress, new { id = "Address" })
        @for (var i = 0; i < Model.ParticipantIds.Count; ++i)
        {
            Html.HiddenFor(model => model.ParticipantIds[i].Id);
            Html.HiddenFor(model => model.ParticipantIds[i].Name);
        }

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index", "Home")
</div>
